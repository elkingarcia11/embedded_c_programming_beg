
005PinRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000180  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  4 .ARM          00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000328  08000328  00010328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000330  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000330  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000955  00000000  00000000  00010360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000191  00000000  00000000  00010cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c25  00000000  00000000  00010ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000062f  00000000  00000000  00012ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007e82  00000000  00000000  00013114  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001af96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001b014  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000310 	.word	0x08000310

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000310 	.word	0x08000310

080001e8 <main>:

#include <stdint.h>
#include <stdio.h>

int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b087      	sub	sp, #28
 80001ec:	af00      	add	r7, sp, #0
	// Address AHB1 Bus clock control reg
	uint32_t* pClkCtrlReg = (uint32_t*) 0x40023830;
 80001ee:	4b1c      	ldr	r3, [pc, #112]	; (8000260 <main+0x78>)
 80001f0:	617b      	str	r3, [r7, #20]
	// Address of GPIOD Mode Reg -
	uint32_t* pPortDModeReg = (uint32_t*) 0x40020C00;
 80001f2:	4b1c      	ldr	r3, [pc, #112]	; (8000264 <main+0x7c>)
 80001f4:	613b      	str	r3, [r7, #16]
	// Address of GPIOA Mode Reg
	uint32_t* pPortAModeReg = (uint32_t*) 0x40020000;
 80001f6:	4b1c      	ldr	r3, [pc, #112]	; (8000268 <main+0x80>)
 80001f8:	60fb      	str	r3, [r7, #12]
	// Address of GPIOD Data Output Reg
	uint32_t* pPortDOutReg = (uint32_t*) 0x40020C14;
 80001fa:	4b1c      	ldr	r3, [pc, #112]	; (800026c <main+0x84>)
 80001fc:	60bb      	str	r3, [r7, #8]
	// Address of GPIOA Data Input Reg
	uint32_t* pPortAInReg = (uint32_t*) 0x40020010;
 80001fe:	4b1c      	ldr	r3, [pc, #112]	; (8000270 <main+0x88>)
 8000200:	607b      	str	r3, [r7, #4]

	//Enable GPIOD and GPIOA peripherals - 1001
	*pClkCtrlReg |= 0x9;
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 0209 	orr.w	r2, r3, #9
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	601a      	str	r2, [r3, #0]
	*pPortDModeReg &= ~(3 << 24);
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	601a      	str	r2, [r3, #0]
	*pPortDModeReg |= (1 << 24);
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	601a      	str	r2, [r3, #0]
	 * 6. Find adress of data input reg
	 * 7. Read
	 * 8. Based on read update PD12(LED)
	 * */
	// Enable input mode (00)
	*pPortAModeReg &= 0xFFFFFFF0;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f023 020f 	bic.w	r2, r3, #15
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	601a      	str	r2, [r3, #0]
	while(1){
		/* Read 0th pin of port A
		 * If even, aka 0 in 0th position, its LOW/OFF
		 * Else its HIGH/ON
		 */
		uint8_t currentState = (uint8_t)(*pPortAInReg & 0x1);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	b2db      	uxtb	r3, r3
 8000238:	f003 0301 	and.w	r3, r3, #1
 800023c:	70fb      	strb	r3, [r7, #3]
		if(!currentState){
 800023e:	78fb      	ldrb	r3, [r7, #3]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d106      	bne.n	8000252 <main+0x6a>
			*pPortDOutReg &= ~(1 << 12);
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	e7ef      	b.n	8000232 <main+0x4a>
		} else {
			*pPortDOutReg |= (1 << 12);
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	601a      	str	r2, [r3, #0]
	while(1){
 800025e:	e7e8      	b.n	8000232 <main+0x4a>
 8000260:	40023830 	.word	0x40023830
 8000264:	40020c00 	.word	0x40020c00
 8000268:	40020000 	.word	0x40020000
 800026c:	40020c14 	.word	0x40020c14
 8000270:	40020010 	.word	0x40020010

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490e      	ldr	r1, [pc, #56]	; (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0b      	ldr	r4, [pc, #44]	; (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800029e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f811 	bl	80002c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ff9f 	bl	80001e8 <main>

080002aa <LoopForever>:

LoopForever:
    b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000330 	.word	0x08000330
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC_IRQHandler>
	...

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	4e0d      	ldr	r6, [pc, #52]	; (8000300 <__libc_init_array+0x38>)
 80002cc:	4c0d      	ldr	r4, [pc, #52]	; (8000304 <__libc_init_array+0x3c>)
 80002ce:	1ba4      	subs	r4, r4, r6
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	2500      	movs	r5, #0
 80002d4:	42a5      	cmp	r5, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	4e0b      	ldr	r6, [pc, #44]	; (8000308 <__libc_init_array+0x40>)
 80002da:	4c0c      	ldr	r4, [pc, #48]	; (800030c <__libc_init_array+0x44>)
 80002dc:	f000 f818 	bl	8000310 <_init>
 80002e0:	1ba4      	subs	r4, r4, r6
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	2500      	movs	r5, #0
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002f0:	4798      	blx	r3
 80002f2:	3501      	adds	r5, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002fa:	4798      	blx	r3
 80002fc:	3501      	adds	r5, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	08000328 	.word	0x08000328
 800030c:	0800032c 	.word	0x0800032c

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr
